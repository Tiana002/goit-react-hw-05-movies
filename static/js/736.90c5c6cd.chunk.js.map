{"version":3,"file":"static/js/736.90c5c6cd.chunk.js","mappings":"iTAEMA,EAAM,mCAECC,EAAiB,mCAAG,4FACd,mDADc,SAERC,EAAAA,EAAAA,IAAA,UADN,mDACM,oBAAiCF,IAFzB,uBAEvBG,EAFuB,EAEvBA,KAFuB,kBAGxBA,GAHwB,2CAAH,qDAMjBC,EAAe,mCAAG,WAAMC,GAAN,+EACZ,4CADY,SAENH,EAAAA,EAAAA,IAAA,UADN,4CACM,oBACEF,EADF,kBACeK,EADf,YAFM,uBAErBF,EAFqB,EAErBA,KAFqB,kBAKtBA,GALsB,2CAAH,sDAQfG,EAAe,mCAAG,WAAMC,GAAN,+EACZ,sCADY,SAENL,EAAAA,EAAAA,IAAA,UADN,sCACM,YAAyBK,EAAzB,oBAAuCP,IAFjC,uBAErBG,EAFqB,EAErBA,KAFqB,kBAGtBA,GAHsB,2CAAH,sDAMfK,EAAe,mCAAG,WAAMD,GAAN,+EACZ,sCADY,SAENL,EAAAA,EAAAA,IAAA,UADN,sCACM,YAAyBK,EAAzB,4BAA+CP,IAFzC,uBAErBG,EAFqB,EAErBA,KAFqB,kBAGtBA,GAHsB,2CAAH,sDAMfM,EAAgB,mCAAG,WAAMF,GAAN,+EACb,sCADa,SAEPL,EAAAA,EAAAA,IAAA,UADN,sCACM,YACNK,EADM,4BACgBP,EADhB,YAFO,uBAEtBG,EAFsB,EAEtBA,KAFsB,kBAKvBA,GALuB,2CAAH,qD,4IC5BhBO,EAAWC,EAAAA,GAAAA,GAAH,+OAcRC,EAAWD,EAAAA,GAAAA,GAAH,uVAiBRE,EAAUF,EAAAA,GAAAA,IAAH,wEAIPG,EAAWH,EAAAA,GAAAA,EAAH,qEAIRI,EAASJ,EAAAA,GAAAA,GAAH,sE,kBCMnB,EAzCa,WACX,IAAQK,GAAYC,EAAAA,EAAAA,MAAZD,QAER,GAAgCE,EAAAA,EAAAA,UAAS,IAAzC,eAAOC,EAAP,KAAiBC,EAAjB,KAUA,OARAC,EAAAA,EAAAA,YAAU,WACR,KACEb,EAAAA,EAAAA,GAAgBQ,GAASM,MAAK,SAAAC,GAAG,OAAIH,EAAYG,EAAIC,KAAKC,OAAO,EAAG,GAAnC,GAGlC,CAFC,MAAOC,GACPC,QAAQC,IAAIF,EACb,CACF,GAAE,CAACV,KAGF,+BACGa,EAAAA,EAAAA,SAAQV,IACP,uBAAG,6DAEH,+BACE,SAACT,EAAD,UACGS,EAASW,KAAI,SAAAC,GACZ,IAAIC,EAAS,GAMb,OADEA,EAJGD,EAAME,aAIH,0CAAsCF,EAAME,cAFhD,6JAIF,UAACrB,EAAD,YACE,SAACC,EAAD,CAASqB,IAAKF,EAAQG,IAAG,UAAKJ,EAAMK,SACpC,SAACtB,EAAD,UAAWiB,EAAMK,QACjB,SAACrB,EAAD,UAASgB,EAAMM,cAHFN,EAAMxB,GAMxB,SAMZ,C","sources":["API.js","components/Cast/Cast.styled.jsx","components/Cast/Cast.jsx"],"sourcesContent":["import axios from 'axios';\n\nconst KEY = '33b1970aafc3d74cd7bfcca057d00843';\n\nexport const getTrendingMovies = async () => {\n  const BASE_URL = 'https://api.themoviedb.org/3/trending/movie/week';\n  const { data } = await axios.get(`${BASE_URL}?api_key=${KEY}`);\n  return data;\n};\n\nexport const getSearchMovies = async query => {\n  const BASE_URL = 'https://api.themoviedb.org/3/search/movie';\n  const { data } = await axios.get(\n    `${BASE_URL}?api_key=${KEY}&query=${query}&page=1`\n  );\n  return data;\n};\n\nexport const getDetailsMovie = async id => {\n  const BASE_URL = 'https://api.themoviedb.org/3/movie/';\n  const { data } = await axios.get(`${BASE_URL}/${id}?api_key=${KEY}`);\n  return data;\n};\n\nexport const getCreditsMovie = async id => {\n  const BASE_URL = 'https://api.themoviedb.org/3/movie/';\n  const { data } = await axios.get(`${BASE_URL}/${id}/credits?api_key=${KEY}`);\n  return data;\n};\n\nexport const getReviewsMovies = async id => {\n  const BASE_URL = 'https://api.themoviedb.org/3/movie/';\n  const { data } = await axios.get(\n    `${BASE_URL}/${id}/reviews?api_key=${KEY}&page=1`\n  );\n  return data;\n};\n","import styled from 'styled-components';\n\nexport const ListCast = styled.ul`\n  padding: 0;\n  margin: 0;\n  list-style: none;\n  gap: 20px;\n  margin-bottom: 50px;\n  display: flex;\n  flex-wrap: wrap;\n  @media screen and (min-width: 768px) {\n    display: flex;\n    flex-wrap: wrap;\n  }\n`;\n\nexport const ItemCast = styled.li`\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  border: solid 3px #fff;\n  border-radius: 10px;\n  background-color: #fff;\n\n  @media screen and (min-width: 768px) {\n    width: calc((100% - 30px) / 2);\n  }\n\n  @media screen and (min-width: 1280px) {\n    width: calc((70% - 60px) / 4);\n  }\n`;\n\nexport const ImgCast = styled.img`\n  border-radius: 10px;\n  margin-bottom: 10px;\n`;\nexport const TextCast = styled.p`\n  margin-bottom: 10px;\n\tfont-weight: 700;\n`;\nexport const TextEm = styled.em`\n  margin-bottom: 5px;\n  text-align: center;\n`;\n","import { useParams } from 'react-router-dom';\nimport { useEffect, useState } from 'react';\nimport { isEmpty } from 'lodash';\nimport { ListCast, ItemCast, TextCast, ImgCast, TextEm } from './Cast.styled';\nimport { getCreditsMovie } from 'API';\n\nconst Cast = () => {\n  const { movieId } = useParams();\n\n  const [filmCast, setFilmCast] = useState([]);\n\n  useEffect(() => {\n    try {\n      getCreditsMovie(movieId).then(res => setFilmCast(res.cast.splice(0, 8)));\n    } catch (error) {\n      console.log(error);\n    }\n  }, [movieId]);\n\n  return (\n    <>\n      {isEmpty(filmCast) ? (\n        <p>We don't have any information about cast for this movie</p>\n      ) : (\n        <>\n          <ListCast>\n            {filmCast.map(actor => {\n              let source = '';\n              if (!actor.profile_path) {\n                source =\n                  'https://www.themoviedb.org/assets/2/v4/glyphicons/basic/glyphicons-basic-4-user-grey-d8fe957375e70239d6abdd549fd7568c89281b2179b5f4470e2e12895792dfa5.svg';\n              } else\n                source = `https://image.tmdb.org/t/p/w500/${actor.profile_path}`;\n              return (\n                <ItemCast key={actor.id}>\n                  <ImgCast src={source} alt={`${actor.name}`} />\n                  <TextCast>{actor.name}</TextCast>\n                  <TextEm>{actor.character}</TextEm>\n                </ItemCast>\n              );\n            })}\n          </ListCast>\n        </>\n      )}\n    </>\n  );\n};\nexport default Cast;\n"],"names":["KEY","getTrendingMovies","axios","data","getSearchMovies","query","getDetailsMovie","id","getCreditsMovie","getReviewsMovies","ListCast","styled","ItemCast","ImgCast","TextCast","TextEm","movieId","useParams","useState","filmCast","setFilmCast","useEffect","then","res","cast","splice","error","console","log","isEmpty","map","actor","source","profile_path","src","alt","name","character"],"sourceRoot":""}